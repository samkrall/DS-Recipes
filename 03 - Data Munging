#replace '0' with NAN
df_copy = df.copy(deep = True)
df_copy[['column1', 'column2', 'column_n']] = df_copy[['column1', 'column2', 'column_n']].replace(0, np.NaN)
df_copy.isnull().sum()

#drop irrelevant column
#by name
df_train.drop('Column',axis=1,inplace=True) 
#by datatype
df_drop = df.select_dtypes(exclude=['object'])

#fill null value with composite value 
df_train["column"].fillna(df_train['column'].median(),inplace=True)  (or mean or mode or â€¦) 
df_train["column"].fillna(df_train['column'].mode()[1],inplace=True)

#create list of categoricals
object_cols = df_train.select_dtypes(['object'])

#find unique categoricals
object_nunique = list(map(lambda col: X_train[col].nunique(), object_cols))
d = dict(zip(object_cols, object_nunique))
sorted(d.items(), key=lambda x: x[1])

#Recoding Values: 
#using.codes
df['column'] = pd.Categorical(df['column']).codes

#using .loc
df.loc[df['column'] <20, 'column_indicator'] = 0
df.loc[df['column'] <30) & (df['column']>20), 'column_indicator] = 1
df.loc[df['column'] >30, 'column_indicator'] = 2

#using replace
df['Sex'].replace(['male','female'],[0,1],inplace=True)

#Using lambda 
df['column'] = df['column'].apply(lambda x: 1 if x == 'attribut1' else 0)

#using another columns values to fill in categorical nan's
df_train.loc[(df_train['Column1'].isna()) & (df_train['Column2'].isin(['A', 'B', 'C', 'D'])), 'Column1'] = 'Value'

#creating a dictionary from the mode of a related column then mapping dictionary values into nan values
dicts = {}
for i in df['column1'].unique():
  filt = (df['column1']==i)
  dicts[i] = df[filt]['column2'].mode()[0]
print(dicts)

df['column2'] = df['column2'].fillna(df['column1'].map(dicts))

#get dummies (logistic regression)
pd.get_dummies(df['column'], drop_first=True)

#one-hot encoding
from sklearn.preprocessing import OneHotEncoder
one_hot_encoder = OneHotEncoder(handle_unknown='ignore, sparse=False)
oh_df_train = pd.DataFrame(one_hot_encoder.fit_transform(df_train['column1', 'column2']))
numerical_df_train = df_train.drop(object_cols, axis=1)
new_df = pd.concat([numerical_df_train, oh_df_train], axis=1)

#ordinal encoding
from sklearn.preprocessing import OrdinalEncoder
ordinal_encoder = OrdinalEncoder()
oe_df_train = ordinal_encoder.fit_transform(df_train['column1', 'column2'])


