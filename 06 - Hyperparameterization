#logistic regression hyperparameterization

best_score = 0
from sklearn.linear_model import  LogisticRegression 
for C in [0.1, 1.0, 10.0, 100.0]:
    logreg = LogisticRegression(random_state = 1, C=C)
    scores = cross_val_score(logreg, X, y, cv=5)
    score = np.mean(scores)
    if score > best_score:
        best_score = score
        best_parameters = {'C':C}
        best_std = np.std(scores)
print(best_score)
print(best_std)
print(best_parameters)


#decision tree hyperparameterization
from sklearn.tree import DecisionTreeClassifier
best_score = 0
for max_depth in [1, 2, 3, 4, 5, 6, 7, 8, 9]:
    dtc = DecisionTreeClassifier(random_state = 1, max_depth=max_depth)
    scores = cross_val_score(dtc, X, y, cv=5)
    score = np.mean(scores)
    if score > best_score:
        best_score = score
        best_parameters = {'max depth': max_depth}
        best_std = np.std(scores)
    
print(best_score)
print(best_std)
print(best_parameters)


#random forest hyperparameterization
from sklearn.ensemble import RandomForestClassifier
best_score = 0
for max_depth in [1, 2, 3, 4, 5, 6, 7, 8, 9]:
    for n_estimators in [10, 50, 100, 500, 1000]:
        rfc = RandomForestClassifier(random_state = 1, max_depth=max_depth, n_estimators = n_estimators)
        scores = cross_val_score(rfc, X, y, cv=5)
        score = np.mean(scores)
        if score > best_score:
            best_score = score
            best_parameters = {'max depth': max_depth, 'n estimators':n_estimators}
            best_std = np.std(scores)
    
print(best_score)
print(best_std)
print(best_parameters)


from sklearn.ensemble import GradientBoostingClassifier
best_score = 0


for learning_rate in [0.1, 0.5, 1, 10, 100]:
    for n_estimators in [1, 25, 50, 100, 250, 500, 1000]:
        for max_leaf_nodes in [2, 3, 4, 5]:
            gbc = GradientBoostingClassifier(random_state=1, learning_rate=learning_rate, n_estimators=n_estimators, max_leaf_nodes=max_leaf_nodes)
            scores = cross_val_score(gbc, X, y, cv = 5)
            score = np.mean(scores)
            if score > best_score:
                best_score = score
                best_std = np.std(scores)
                best_parameters = {'learning rate':learning_rate, 'n estimators':n_estimators, 'max leaf nodes': max_leaf_nodes}
                
                
print(best_score)
print(best_std)
print(best_parameters)
